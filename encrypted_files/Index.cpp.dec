#include "Index.h"
#include <sstream>
#include <algorithm>

inline bool see_word(std::unordered_map<std::string,std::vector<int>> &dictionary, const std::string &word, const unsigned int &i) {
   if(!dictionary[word].empty() && dictionary[word].back()==i){return true;}
   dictionary[word].push_back(i);
   YELLF(INIT, "#word="<<word<<" now has indices:");
   YELLVEC(INIT, dictionary[word]);
   return false;
}

Index::Index(Log const &log) {
   for(unsigned int i=0; i<log.entries.size(); ++i) {
      //0. handle .timestamp (actually .timeint)
      times.push_back({log.entries[i].timeint, i});

      //1. handle .category
      std::string word;
      word = log.entries[i].category;
      categories[word].push_back(i);
      see_word(mentions, word, i);
      
      //2. handle .message
      std::string message = log.entries[i].message;
      std::stringstream ss; ss << message;
      YELLF(INIT, "#@#@#\n");
      while(ss >> word) {
         if(see_word(mentions, word, i)) {continue;}
         ++(counts[word]);
      }
   }
 
   //important additional processing!:
   std::sort(times.begin(), times.end(), T);
}
