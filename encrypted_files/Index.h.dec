#ifndef INDEX_H
#define INDEX_H

#include <unordered_map>
#include <vector>
#include "Log.h"

class TimePairComp {
public:
   TimePairComp() {}
   bool operator()(const std::pair<unsigned long int,int> &a, const std::pair<unsigned long int,int> &b) {
      return a.first<b.first;
   }
};

class Index {
public:
   TimePairComp T;
   std::unordered_map<std::string, std::vector<int>> categories; //string->vector of entry indices with string as category
   std::vector<std::pair<unsigned long int,int>> times; //(timeint, entry index) pairs
   std::unordered_map<std::string, std::vector<int>> mentions; //string->vector of indices of entries containing string in category or message
   std::unordered_map<std::string, unsigned int> counts; //string->number of entries containing string in category or message 
   Index(Log const &log);
   void search_message(std::vector<std::string> keywords,
                       std::vector<int> &matches);
   void search_category(std::string keyword,
                        std::vector<int> &matches);
   void search_times(std::string time1, std::string time2,
                     std::vector<int> &matches);
};

#endif//INDEX_H
